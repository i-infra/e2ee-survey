#!/usr/bin/env node

/**
 * Build script to inline static assets into the worker
 * Reads files from public/ and src/shared/ and generates src/worker/assets.js
 */

import { readFileSync, writeFileSync, readdirSync, statSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

/**
 * Read all files from a directory recursively
 */
function readDirectoryRecursive(dir, baseDir = dir) {
  const files = {};
  
  function traverse(currentDir) {
    const items = readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = join(currentDir, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        traverse(fullPath);
      } else if (stat.isFile()) {
        // Create relative path from base directory
        const relativePath = fullPath.replace(baseDir + '/', '');
        
        try {
          const content = readFileSync(fullPath, 'utf8');
          files[relativePath] = content;
          console.log(`‚úì Inlined: ${relativePath} (${content.length} chars)`);
        } catch (error) {
          console.warn(`‚ö† Skipped: ${relativePath} (${error.message})`);
        }
      }
    }
  }
  
  traverse(dir);
  return files;
}

/**
 * Generate the assets.js file
 */
function generateAssetsFile() {
  console.log('üî® Building static assets...');
  
  // Read public directory files
  const publicDir = join(projectRoot, 'public');
  const publicFiles = readDirectoryRecursive(publicDir);
  
  // Read shared JavaScript modules
  const sharedDir = join(projectRoot, 'src', 'shared');
  const sharedFiles = readDirectoryRecursive(sharedDir);
  
  // Generate the assets module
  let assetsContent = `/**
 * Static assets inlined at build time
 * Generated by scripts/build-assets.js - DO NOT EDIT MANUALLY
 */

// HTML Files
export const htmlFiles = ${JSON.stringify(publicFiles, null, 2)};

// Shared JavaScript Modules  
export const sharedModules = ${JSON.stringify(sharedFiles, null, 2)};

/**
 * Get file content by path
 */
export function getFile(path) {
  // Remove leading slash
  const normalizedPath = path.startsWith('/') ? path.slice(1) : path;
  
  // Check HTML files first
  if (htmlFiles[normalizedPath]) {
    return {
      content: htmlFiles[normalizedPath],
      contentType: getContentType(normalizedPath)
    };
  }
  
  // Check shared modules (for /src/shared/ paths)
  if (normalizedPath.startsWith('src/shared/')) {
    const modulePath = normalizedPath.replace('src/shared/', '');
    if (sharedModules[modulePath]) {
      return {
        content: sharedModules[modulePath],
        contentType: 'application/javascript'
      };
    }
  }
  
  return null;
}

/**
 * Get content type based on file extension
 */
function getContentType(path) {
  const ext = path.split('.').pop()?.toLowerCase();
  
  switch (ext) {
    case 'html':
      return 'text/html; charset=utf-8';
    case 'js':
      return 'application/javascript; charset=utf-8';
    case 'css':
      return 'text/css; charset=utf-8';
    case 'json':
      return 'application/json; charset=utf-8';
    case 'png':
      return 'image/png';
    case 'jpg':
    case 'jpeg':
      return 'image/jpeg';
    case 'svg':
      return 'image/svg+xml';
    case 'ico':
      return 'image/x-icon';
    default:
      return 'text/plain; charset=utf-8';
  }
}

/**
 * List all available files
 */
export function listFiles() {
  return {
    html: Object.keys(htmlFiles),
    shared: Object.keys(sharedModules)
  };
}
`;

  // Write the generated file
  const outputPath = join(projectRoot, 'src', 'worker', 'assets.js');
  writeFileSync(outputPath, assetsContent, 'utf8');
  
  console.log(`‚úÖ Generated assets.js with:`);
  console.log(`   - ${Object.keys(publicFiles).length} HTML/static files`);
  console.log(`   - ${Object.keys(sharedFiles).length} shared modules`);
  console.log(`   - Output: ${outputPath}`);
}

// Run the build
try {
  generateAssetsFile();
  process.exit(0);
} catch (error) {
  console.error('‚ùå Build failed:', error);
  process.exit(1);
}